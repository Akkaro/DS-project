{
  "info": {
    "name": "Device Microservice API",
    "_postman_id": "device-microservice-api",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:8081" },
    { "key": "userBaseUrl", "value": "http://localhost:8080" },
    { "key": "resource", "value": "devices" },
    { "key": "deviceId", "value": "" },
    { "key": "userId", "value": "PLEASE_SET_USER_ID_HERE" }
  ],
  "item": [
    {
      "name": "SETUP - Create test user in User Microservice",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"testclient\",\n  \"password\": \"password123\",\n  \"email\": \"testclient@example.com\",\n  \"name\": \"Test Client\",\n  \"role\": \"CLIENT\"\n}"
        },
        "url": { "raw": "{{userBaseUrl}}/users", "host": ["{{userBaseUrl}}"], "path": ["users"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 201) {",
              "    let id = null;",
              "    const loc = pm.response.headers.get('Location');",
              "    if (loc) { id = loc.split('/').slice(-1)[0]; }",
              "    pm.expect(id, 'Extracted userId').to.be.ok;",
              "    pm.collectionVariables.set('userId', id);",
              "    console.log('User ID set to: ' + id);",
              "} else if (pm.response.code === 409) {",
              "    console.log('User already exists - you need to manually set userId variable');",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "GET – List all devices (200)",
      "request": {
        "method": "GET",
        "header": [{ "key": "Accept", "value": "application/json" }],
        "url": { "raw": "{{baseUrl}}/{{resource}}", "host": ["{{baseUrl}}"], "path": ["{{resource}}"] }
      }
    },
    {
      "name": "GET – List devices by status ACTIVE (200)",
      "request": {
        "method": "GET",
        "header": [{ "key": "Accept", "value": "application/json" }],
        "url": { "raw": "{{baseUrl}}/{{resource}}/status/ACTIVE", "host": ["{{baseUrl}}"], "path": ["{{resource}}", "status", "ACTIVE"] }
      }
    },
    {
      "name": "GET – List unassigned devices (200)",
      "request": {
        "method": "GET",
        "header": [{ "key": "Accept", "value": "application/json" }],
        "url": { "raw": "{{baseUrl}}/{{resource}}/unassigned", "host": ["{{baseUrl}}"], "path": ["{{resource}}", "unassigned"] }
      }
    },
    {
      "name": "POST – Create smart meter (201) [valid]",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Smart Meter SM-001\",\n  \"description\": \"Main building smart meter\",\n  \"address\": \"Building A, Floor 1\",\n  \"maxConsumption\": 5000.0,\n  \"status\": \"ACTIVE\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/{{resource}}", "host": ["{{baseUrl}}"], "path": ["{{resource}}"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Created', ()=> pm.response.to.have.status(201));",
              "let id = null;",
              "const loc = pm.response.headers.get('Location');",
              "if (loc) { id = loc.split('/').slice(-1)[0]; }",
              "pm.expect(id, 'Extracted deviceId').to.be.ok;",
              "pm.collectionVariables.set('deviceId', id);",
              "console.log('Device ID set to: ' + id);"
            ]
          }
        }
      ]
    },
    {
      "name": "POST – Create smart meter 2 (201) [valid]",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Smart Meter SM-002\",\n  \"description\": \"Secondary building smart meter\",\n  \"address\": \"Building B, Floor 2\",\n  \"maxConsumption\": 3000.0,\n  \"status\": \"ACTIVE\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/{{resource}}", "host": ["{{baseUrl}}"], "path": ["{{resource}}"] }
      }
    },
    {
      "name": "POST – Create HVAC system (201) [valid]",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"HVAC Central Unit\",\n  \"description\": \"Central heating and cooling system\",\n  \"address\": \"Building A, Basement\",\n  \"maxConsumption\": 15000.0,\n  \"status\": \"ACTIVE\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/{{resource}}", "host": ["{{baseUrl}}"], "path": ["{{resource}}"] }
      }
    },
    {
      "name": "GET – Get device by ID (200)",
      "request": {
        "method": "GET",
        "header": [{ "key": "Accept", "value": "application/json" }],
        "url": { "raw": "{{baseUrl}}/{{resource}}/{{deviceId}}", "host": ["{{baseUrl}}"], "path": ["{{resource}}", "{{deviceId}}"] }
      }
    },
    {
      "name": "POST – Name too short (400) [@Size]",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"SM\",\n  \"description\": \"Test device\",\n  \"address\": \"Test address\",\n  \"maxConsumption\": 1000.0,\n  \"status\": \"ACTIVE\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/{{resource}}", "host": ["{{baseUrl}}"], "path": ["{{resource}}"] }
      }
    },
    {
      "name": "POST – Missing name (400) [@NotBlank]",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"description\": \"Test device\",\n  \"address\": \"Test address\",\n  \"maxConsumption\": 1000.0,\n  \"status\": \"ACTIVE\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/{{resource}}", "host": ["{{baseUrl}}"], "path": ["{{resource}}"] }
      }
    },
    {
      "name": "POST – Negative consumption (400) [@Positive]",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Test Device\",\n  \"description\": \"Test device\",\n  \"address\": \"Test address\",\n  \"maxConsumption\": -100.0,\n  \"status\": \"ACTIVE\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/{{resource}}", "host": ["{{baseUrl}}"], "path": ["{{resource}}"] }
      }
    },
    {
      "name": "POST – Duplicate name (409)",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Smart Meter SM-001\",\n  \"description\": \"Duplicate device\",\n  \"address\": \"Another address\",\n  \"maxConsumption\": 2000.0,\n  \"status\": \"ACTIVE\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/{{resource}}", "host": ["{{baseUrl}}"], "path": ["{{resource}}"] }
      }
    },
    {
      "name": "PUT – Update device (204)",
      "request": {
        "method": "PUT",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Smart Meter SM-001 Updated\",\n  \"description\": \"Updated main building smart meter\",\n  \"address\": \"Building A, Floor 1, Room 101\",\n  \"maxConsumption\": 6000.0,\n  \"status\": \"MAINTENANCE\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/{{resource}}/{{deviceId}}", "host": ["{{baseUrl}}"], "path": ["{{resource}}", "{{deviceId}}"] }
      }
    },
    {
      "name": "PUT – Assign device to user (204)",
      "request": {
        "method": "PUT",
        "header": [],
        "url": { 
          "raw": "{{baseUrl}}/{{resource}}/{{deviceId}}/assign/{{userId}}", 
          "host": ["{{baseUrl}}"], 
          "path": ["{{resource}}", "{{deviceId}}", "assign", "{{userId}}"] 
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const userId = pm.collectionVariables.get('userId');",
              "if (!userId || userId === 'PLEASE_SET_USER_ID_HERE' || userId === '') {",
              "    console.error('ERROR: userId is not set! Please run the SETUP request first or manually set the userId variable.');",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "GET – Get devices by user (200)",
      "request": {
        "method": "GET",
        "header": [{ "key": "Accept", "value": "application/json" }],
        "url": { 
          "raw": "{{baseUrl}}/{{resource}}/user/{{userId}}", 
          "host": ["{{baseUrl}}"], 
          "path": ["{{resource}}", "user", "{{userId}}"] 
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const userId = pm.collectionVariables.get('userId');",
              "if (!userId || userId === 'PLEASE_SET_USER_ID_HERE' || userId === '') {",
              "    console.error('ERROR: userId is not set! Please run the SETUP request first or manually set the userId variable.');",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "GET – Count devices by user (200)",
      "request": {
        "method": "GET",
        "header": [{ "key": "Accept", "value": "application/json" }],
        "url": { 
          "raw": "{{baseUrl}}/{{resource}}/user/{{userId}}/count", 
          "host": ["{{baseUrl}}"], 
          "path": ["{{resource}}", "user", "{{userId}}", "count"] 
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const userId = pm.collectionVariables.get('userId');",
              "if (!userId || userId === 'PLEASE_SET_USER_ID_HERE' || userId === '') {",
              "    console.error('ERROR: userId is not set! Please run the SETUP request first or manually set the userId variable.');",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "PUT – Unassign device (204)",
      "request": {
        "method": "PUT",
        "header": [],
        "url": { 
          "raw": "{{baseUrl}}/{{resource}}/{{deviceId}}/unassign", 
          "host": ["{{baseUrl}}"], 
          "path": ["{{resource}}", "{{deviceId}}", "unassign"] 
        }
      }
    },
    {
      "name": "DELETE – Remove device (204)",
      "request": {
        "method": "DELETE",
        "url": { "raw": "{{baseUrl}}/{{resource}}/{{deviceId}}", "host": ["{{baseUrl}}"], "path": ["{{resource}}", "{{deviceId}}"] }
      }
    },
    {
      "name": "DELETE – Device not found (404)",
      "request": {
        "method": "DELETE",
        "url": { "raw": "{{baseUrl}}/{{resource}}/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "host": ["{{baseUrl}}"], "path": ["{{resource}}", "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"] }
      }
    }
  ]
}